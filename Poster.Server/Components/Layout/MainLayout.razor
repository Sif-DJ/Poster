@using MudBlazor.Utilities
@using Poster.Core.DTOs
@using Poster.Core.Models
@using Poster.Server.Components.Pages
@inherits LayoutComponentBase

<MudThemeProvider Theme="CustomTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>@title</PageTitle>

<CascadingValue Value="this">
    <MudLayout>
        <MudAppBar Color="Color.Dark" Elevation="10" Fixed="true">
            <a href="/">
                <MudText Typo="Typo.h2" Color="Color.Primary">Poster!</MudText>
            </a>
            <MudText Typo="Typo.h5" Color="Color.Primary" Style="margin-left: 10px">▶ @Title</MudText>
            <MudSpacer/>
            <MudButtonGroup Variant="Variant.Text" Color="Color.Primary">
                @if(User == null){
                    <MudButton Href="Account/Register">Register</MudButton>
                    <MudButton Href="Account/Login">Login</MudButton>
                }
                else
                {
                    <MudButton OnClick="@(() => LogOut())">Logout</MudButton>
                }
            </MudButtonGroup>
        </MudAppBar>

        <MudDrawer Open="true"
                   Color="Color.Dark"
                   ClipMode="DrawerClipMode.Always"
                   Elevation="5"
                   Variant="DrawerVariant.Persistent">
            <MudNavMenu Bordered="true" Color="Color.Primary">
                @if (User is not null)
                {
                    <MudNavLink Href="@("Timeline/"+User.Username)">Own Timeline</MudNavLink>
                }
            </MudNavMenu>
        </MudDrawer>

        <MudMainContent Class="overflow-auto">
            <div style="margin: 10px">
                @Body
                <CreatePost isVisible="@DisplayCreatePost" user="User"/>
            </div>
        </MudMainContent>
    </MudLayout>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code{

    public bool DisplayCreatePost;
    
    private string title = "";
    private UserDTO? user;

    public string Title
    {
        get => title;
        set
        {
            title = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    public UserDTO? User
    {
        get => user;
        set
        {
            user = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    private MudTheme CustomTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = MudColor.Parse("#FFFFFF"),
            Dark = MudColor.Parse("#222222"),
            
        }
    };

    private async Task LogOut()
    {
        User = null;
        await ProtectedSessionStore.SetAsync("LoggedInUser", User);
        NavMan.NavigateTo("/", true);
    }

    public void OpenMakePost()
    {
        DisplayCreatePost = true;
        StateHasChanged();
    }
}